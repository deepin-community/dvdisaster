%!PS-Adobe-2.0 EPSF-2.0
%%Title: spiral.fig
%%Creator: fig2dev Version 3.2 Patchlevel 5
%%CreationDate: Thu Oct 29 10:43:58 2009
%%For: cg@wanderer (Carsten Gnoerlich)
%%BoundingBox: 0 0 519 489
%Magnification: 1.0000
%%EndComments
%%BeginProlog
/MyAppDict 100 dict dup begin def
/$F2psDict 200 dict def
$F2psDict begin
$F2psDict /mtrx matrix put
/col-1 {0 setgray} bind def
/col0 {0.000 0.000 0.000 srgb} bind def
/col1 {0.000 0.000 1.000 srgb} bind def
/col2 {0.000 1.000 0.000 srgb} bind def
/col3 {0.000 1.000 1.000 srgb} bind def
/col4 {1.000 0.000 0.000 srgb} bind def
/col5 {1.000 0.000 1.000 srgb} bind def
/col6 {1.000 1.000 0.000 srgb} bind def
/col7 {1.000 1.000 1.000 srgb} bind def
/col8 {0.000 0.000 0.560 srgb} bind def
/col9 {0.000 0.000 0.690 srgb} bind def
/col10 {0.000 0.000 0.820 srgb} bind def
/col11 {0.530 0.810 1.000 srgb} bind def
/col12 {0.000 0.560 0.000 srgb} bind def
/col13 {0.000 0.690 0.000 srgb} bind def
/col14 {0.000 0.820 0.000 srgb} bind def
/col15 {0.000 0.560 0.560 srgb} bind def
/col16 {0.000 0.690 0.690 srgb} bind def
/col17 {0.000 0.820 0.820 srgb} bind def
/col18 {0.560 0.000 0.000 srgb} bind def
/col19 {0.690 0.000 0.000 srgb} bind def
/col20 {0.820 0.000 0.000 srgb} bind def
/col21 {0.560 0.000 0.560 srgb} bind def
/col22 {0.690 0.000 0.690 srgb} bind def
/col23 {0.820 0.000 0.820 srgb} bind def
/col24 {0.500 0.190 0.000 srgb} bind def
/col25 {0.630 0.250 0.000 srgb} bind def
/col26 {0.750 0.380 0.000 srgb} bind def
/col27 {1.000 0.500 0.500 srgb} bind def
/col28 {1.000 0.630 0.630 srgb} bind def
/col29 {1.000 0.750 0.750 srgb} bind def
/col30 {1.000 0.880 0.880 srgb} bind def
/col31 {1.000 0.840 0.000 srgb} bind def

end

% This junk string is used by the show operators
/PATsstr 1 string def
/PATawidthshow { 	% cx cy cchar rx ry string
  % Loop over each character in the string
  {  % cx cy cchar rx ry char
    % Show the character
    dup				% cx cy cchar rx ry char char
    PATsstr dup 0 4 -1 roll put	% cx cy cchar rx ry char (char)
    false charpath		% cx cy cchar rx ry char
    /clip load PATdraw
    % Move past the character (charpath modified the
    % current point)
    currentpoint			% cx cy cchar rx ry char x y
    newpath
    moveto			% cx cy cchar rx ry char
    % Reposition by cx,cy if the character in the string is cchar
    3 index eq {			% cx cy cchar rx ry
      4 index 4 index rmoveto
    } if
    % Reposition all characters by rx ry
    2 copy rmoveto		% cx cy cchar rx ry
  } forall
  pop pop pop pop pop		% -
  currentpoint
  newpath
  moveto
} bind def
/PATcg {
  7 dict dup begin
    /lw currentlinewidth def
    /lc currentlinecap def
    /lj currentlinejoin def
    /ml currentmiterlimit def
    /ds [ currentdash ] def
    /cc [ currentrgbcolor ] def
    /cm matrix currentmatrix def
  end
} bind def
% PATdraw - calculates the boundaries of the object and
% fills it with the current pattern
/PATdraw {			% proc
  save exch
    PATpcalc			% proc nw nh px py
    5 -1 roll exec		% nw nh px py
    newpath
    PATfill			% -
  restore
} bind def
% PATfill - performs the tiling for the shape
/PATfill { % nw nh px py PATfill -
  PATDict /CurrentPattern get dup begin
    setfont
    % Set the coordinate system to Pattern Space
    PatternGState PATsg
    % Set the color for uncolored pattezns
    PaintType 2 eq { PATDict /PColor get PATsc } if
    % Create the string for showing
    3 index string		% nw nh px py str
    % Loop for each of the pattern sources
    0 1 Multi 1 sub {		% nw nh px py str source
	% Move to the starting location
	3 index 3 index		% nw nh px py str source px py
	moveto			% nw nh px py str source
	% For multiple sources, set the appropriate color
	Multi 1 ne { dup PC exch get PATsc } if
	% Set the appropriate string for the source
	0 1 7 index 1 sub { 2 index exch 2 index put } for pop
	% Loop over the number of vertical cells
	3 index 		% nw nh px py str nh
	{			% nw nh px py str
	  currentpoint		% nw nh px py str cx cy
	  2 index oldshow	% nw nh px py str cx cy
	  YStep add moveto	% nw nh px py str
	} repeat		% nw nh px py str
    } for
    5 { pop } repeat
  end
} bind def

% PATkshow - kshow with the current pattezn
/PATkshow {			% proc string
  exch bind			% string proc
  1 index 0 get			% string proc char
  % Loop over all but the last character in the string
  0 1 4 index length 2 sub {
				% string proc char idx
    % Find the n+1th character in the string
    3 index exch 1 add get	% string proc char char+1
    exch 2 copy			% strinq proc char+1 char char+1 char
    % Now show the nth character
    PATsstr dup 0 4 -1 roll put	% string proc chr+1 chr chr+1 (chr)
    false charpath		% string proc char+1 char char+1
    /clip load PATdraw
    % Move past the character (charpath modified the current point)
    currentpoint newpath moveto
    % Execute the user proc (should consume char and char+1)
    mark 3 1 roll		% string proc char+1 mark char char+1
    4 index exec		% string proc char+1 mark...
    cleartomark			% string proc char+1
  } for
  % Now display the last character
  PATsstr dup 0 4 -1 roll put	% string proc (char+1)
  false charpath		% string proc
  /clip load PATdraw
  neewath
  pop pop			% -
} bind def
% PATmp - the makepattern equivalent
/PATmp {			% patdict patmtx PATmp patinstance
  exch dup length 7 add		% We will add 6 new entries plus 1 FID
  dict copy			% Create a new dictionary
  begin
    % Matrix to install when painting the pattern
    TilingType PATtcalc
    /PatternGState PATcg def
    PatternGState /cm 3 -1 roll put
    % Check for multi pattern sources (Level 1 fast color patterns)
    currentdict /Multi known not { /Multi 1 def } if
    % Font dictionary definitions
    /FontType 3 def
    % Create a dummy encoding vector
    /Encoding 256 array def
    3 string 0 1 255 {
      Encoding exch dup 3 index cvs cvn put } for pop
    /FontMatrix matrix def
    /FontBBox BBox def
    /BuildChar {
	mark 3 1 roll		% mark dict char
	exch begin
	Multi 1 ne {PaintData exch get}{pop} ifelse  % mark [paintdata]
	  PaintType 2 eq Multi 1 ne or
	  { XStep 0 FontBBox aload pop setcachedevice }
	  { XStep 0 setcharwidth } ifelse
	  currentdict		% mark [paintdata] dict
	  /PaintProc load	% mark [paintdata] dict paintproc
	end
	gsave
	  false PATredef exec true PATredef
	grestore
	cleartomark		% -
    } bind def
    currentdict
  end				% newdict
  /foo exch			% /foo newlict
  definefont			% newfont
} bind def
% PATpcalc - calculates the starting point and width/height
% of the tile fill for the shape
/PATpcalc {	% - PATpcalc nw nh px py
  PATDict /CurrentPattern get begin
    gsave
	% Set up the coordinate system to Pattern Space
	% and lock down pattern
	PatternGState /cm get setmatrix
	BBox aload pop pop pop translate
	% Determine the bounding box of the shape
	pathbbox			% llx lly urx ury
    grestore
    % Determine (nw, nh) the # of cells to paint width and height
    PatHeight div ceiling		% llx lly urx qh
    4 1 roll				% qh llx lly urx
    PatWidth div ceiling		% qh llx lly qw
    4 1 roll				% qw qh llx lly
    PatHeight div floor			% qw qh llx ph
    4 1 roll				% ph qw qh llx
    PatWidth div floor			% ph qw qh pw
    4 1 roll				% pw ph qw qh
    2 index sub cvi abs			% pw ph qs qh-ph
    exch 3 index sub cvi abs exch	% pw ph nw=qw-pw nh=qh-ph
    % Determine the starting point of the pattern fill
    %(px, py)
    4 2 roll				% nw nh pw ph
    PatHeight mul			% nw nh pw py
    exch				% nw nh py pw
    PatWidth mul exch			% nw nh px py
  end
} bind def

% Save the original routines so that we can use them later on
/oldfill	/fill load def
/oldeofill	/eofill load def
/oldstroke	/stroke load def
/oldshow	/show load def
/oldashow	/ashow load def
/oldwidthshow	/widthshow load def
/oldawidthshow	/awidthshow load def
/oldkshow	/kshow load def

% These defs are necessary so that subsequent procs don't bind in
% the originals
/fill	   { oldfill } bind def
/eofill	   { oldeofill } bind def
/stroke	   { oldstroke } bind def
/show	   { oldshow } bind def
/ashow	   { oldashow } bind def
/widthshow { oldwidthshow } bind def
/awidthshow { oldawidthshow } bind def
/kshow 	   { oldkshow } bind def
/PATredef {
  MyAppDict begin
    {
    /fill { /clip load PATdraw newpath } bind def
    /eofill { /eoclip load PATdraw newpath } bind def
    /stroke { PATstroke } bind def
    /show { 0 0 null 0 0 6 -1 roll PATawidthshow } bind def
    /ashow { 0 0 null 6 3 roll PATawidthshow }
    bind def
    /widthshow { 0 0 3 -1 roll PATawidthshow }
    bind def
    /awidthshow { PATawidthshow } bind def
    /kshow { PATkshow } bind def
  } {
    /fill   { oldfill } bind def
    /eofill { oldeofill } bind def
    /stroke { oldstroke } bind def
    /show   { oldshow } bind def
    /ashow  { oldashow } bind def
    /widthshow { oldwidthshow } bind def
    /awidthshow { oldawidthshow } bind def
    /kshow  { oldkshow } bind def
    } ifelse
  end
} bind def
false PATredef
% Conditionally define setcmykcolor if not available
/setcmykcolor where { pop } {
  /setcmykcolor {
    1 sub 4 1 roll
    3 {
	3 index add neg dup 0 lt { pop 0 } if 3 1 roll
    } repeat
    setrgbcolor - pop
  } bind def
} ifelse
/PATsc {		% colorarray
  aload length		% c1 ... cn length
    dup 1 eq { pop setgray } { 3 eq { setrgbcolor } { setcmykcolor
  } ifelse } ifelse
} bind def
/PATsg {		% dict
  begin
    lw setlinewidth
    lc setlinecap
    lj setlinejoin
    ml setmiterlimit
    ds aload pop setdash
    cc aload pop setrgbcolor
    cm setmatrix
  end
} bind def

/PATDict 3 dict def
/PATsp {
  true PATredef
  PATDict begin
    /CurrentPattern exch def
    % If it's an uncolored pattern, save the color
    CurrentPattern /PaintType get 2 eq {
      /PColor exch def
    } if
    /CColor [ currentrgbcolor ] def
  end
} bind def
% PATstroke - stroke with the current pattern
/PATstroke {
  countdictstack
  save
  mark
  {
    currentpoint strokepath moveto
    PATpcalc				% proc nw nh px py
    clip newpath PATfill
    } stopped {
	(*** PATstroke Warning: Path is too complex, stroking
	  with gray) =
    cleartomark
    restore
    countdictstack exch sub dup 0 gt
	{ { end } repeat } { pop } ifelse
    gsave 0.5 setgray oldstroke grestore
  } { pop restore pop } ifelse
  newpath
} bind def
/PATtcalc {		% modmtx tilingtype PATtcalc tilematrix
  % Note: tiling types 2 and 3 are not supported
  gsave
    exch concat					% tilingtype
    matrix currentmatrix exch			% cmtx tilingtype
    % Tiling type 1 and 3: constant spacing
    2 ne {
	% Distort the pattern so that it occupies
	% an integral number of device pixels
	dup 4 get exch dup 5 get exch		% tx ty cmtx
	XStep 0 dtransform
	round exch round exch			% tx ty cmtx dx.x dx.y
	XStep div exch XStep div exch		% tx ty cmtx a b
	0 YStep dtransform
	round exch round exch			% tx ty cmtx a b dy.x dy.y
	YStep div exch YStep div exch		% tx ty cmtx a b c d
	7 -3 roll astore			% { a b c d tx ty }
    } if
  grestore
} bind def
/PATusp {
  false PATredef
  PATDict begin
    CColor PATsc
  end
} bind def

% left45
11 dict begin
/PaintType 1 def
/PatternType 1 def
/TilingType 1 def
/BBox [0 0 1 1] def
/XStep 1 def
/YStep 1 def
/PatWidth 1 def
/PatHeight 1 def
/Multi 2 def
/PaintData [
  { clippath } bind
  { 20 20 true [ 20 0 0 -20 0 20 ]
	{<8020004010002008001004000802000401000200
	8001004000802000401080200040100020080010
	0400080200040100020080010040008020004010>}
     imagemask } bind
] def
/PaintProc {
	pop
	exec fill
} def
currentdict
end
/P4 exch def

% right45
11 dict begin
/PaintType 1 def
/PatternType 1 def
/TilingType 1 def
/BBox [0 0 1 1] def
/XStep 1 def
/YStep 1 def
/PatWidth 1 def
/PatHeight 1 def
/Multi 2 def
/PaintData [
  { clippath } bind
  { 20 20 true [ 20 0 0 -20 0 20 ]
	{<0040100080200100400200800401000802001004
	0020080040100080200000401000802001004002
	0080040100080200100400200800401000802000>}
     imagemask } bind
] def
/PaintProc {
	pop
	exec fill
} def
currentdict
end
/P5 exch def

% crosshatch45
11 dict begin
/PaintType 1 def
/PatternType 1 def
/TilingType 1 def
/BBox [0 0 1 1] def
/XStep 1 def
/YStep 1 def
/PatWidth 1 def
/PatHeight 1 def
/Multi 2 def
/PaintData [
  { clippath } bind
  { 20 20 true [ 20 0 0 -20 0 20 ]
	{<8020004050102088201104400a02800401000a02
	8011044020882040501080200040501020882011
	04400a02800401000a0280110440208820405010>}
     imagemask } bind
] def
/PaintProc {
	pop
	exec fill
} def
currentdict
end
/P6 exch def

% horizontal lines
11 dict begin
/PaintType 1 def
/PatternType 1 def
/TilingType 1 def
/BBox [0 0 1 1] def
/XStep 1 def
/YStep 1 def
/PatWidth 1 def
/PatHeight 1 def
/Multi 2 def
/PaintData [
  { clippath } bind
  { 16 8 true [ 16 0 0 -8 0 8 ]
	{< ffff000000000000ffff000000000000>}
     imagemask } bind
] def
/PaintProc {
	pop
	exec fill
} def
currentdict
end
/P9 exch def

% crosshatch lines
11 dict begin
/PaintType 1 def
/PatternType 1 def
/TilingType 1 def
/BBox [0 0 1 1] def
/XStep 1 def
/YStep 1 def
/PatWidth 1 def
/PatHeight 1 def
/Multi 2 def
/PaintData [
  { clippath } bind
  { 16 16 true [ 16 0 0 -16 0 16 ]
	{<ffff111111111111ffff111111111111ffff111111111111
	ffff111111111111>}
     imagemask } bind
] def
/PaintProc {
	pop
	exec fill
} def
currentdict
end
/P11 exch def

/cp {closepath} bind def
/ef {eofill} bind def
/gr {grestore} bind def
/gs {gsave} bind def
/sa {save} bind def
/rs {restore} bind def
/l {lineto} bind def
/m {moveto} bind def
/rm {rmoveto} bind def
/n {newpath} bind def
/s {stroke} bind def
/sh {show} bind def
/slc {setlinecap} bind def
/slj {setlinejoin} bind def
/slw {setlinewidth} bind def
/srgb {setrgbcolor} bind def
/rot {rotate} bind def
/sc {scale} bind def
/sd {setdash} bind def
/ff {findfont} bind def
/sf {setfont} bind def
/scf {scalefont} bind def
/sw {stringwidth} bind def
/tr {translate} bind def
/tnt {dup dup currentrgbcolor
  4 -2 roll dup 1 exch sub 3 -1 roll mul add
  4 -2 roll dup 1 exch sub 3 -1 roll mul add
  4 -2 roll dup 1 exch sub 3 -1 roll mul add srgb}
  bind def
/shd {dup dup currentrgbcolor 4 -2 roll mul 4 -2 roll mul
  4 -2 roll mul srgb} bind def
/reencdict 12 dict def /ReEncode { reencdict begin
/newcodesandnames exch def /newfontname exch def /basefontname exch def
/basefontdict basefontname findfont def /newfont basefontdict maxlength dict def
basefontdict { exch dup /FID ne { dup /Encoding eq
{ exch dup length array copy newfont 3 1 roll put }
{ exch newfont 3 1 roll put } ifelse } { pop pop } ifelse } forall
newfont /FontName newfontname put newcodesandnames aload pop
128 1 255 { newfont /Encoding get exch /.notdef put } for
newcodesandnames length 2 idiv { newfont /Encoding get 3 1 roll put } repeat
newfontname newfont definefont pop end } def
/isovec [
8#055 /minus 8#200 /grave 8#201 /acute 8#202 /circumflex 8#203 /tilde
8#204 /macron 8#205 /breve 8#206 /dotaccent 8#207 /dieresis
8#210 /ring 8#211 /cedilla 8#212 /hungarumlaut 8#213 /ogonek 8#214 /caron
8#220 /dotlessi 8#230 /oe 8#231 /OE
8#240 /space 8#241 /exclamdown 8#242 /cent 8#243 /sterling
8#244 /currency 8#245 /yen 8#246 /brokenbar 8#247 /section 8#250 /dieresis
8#251 /copyright 8#252 /ordfeminine 8#253 /guillemotleft 8#254 /logicalnot
8#255 /hyphen 8#256 /registered 8#257 /macron 8#260 /degree 8#261 /plusminus
8#262 /twosuperior 8#263 /threesuperior 8#264 /acute 8#265 /mu 8#266 /paragraph
8#267 /periodcentered 8#270 /cedilla 8#271 /onesuperior 8#272 /ordmasculine
8#273 /guillemotright 8#274 /onequarter 8#275 /onehalf
8#276 /threequarters 8#277 /questiondown 8#300 /Agrave 8#301 /Aacute
8#302 /Acircumflex 8#303 /Atilde 8#304 /Adieresis 8#305 /Aring
8#306 /AE 8#307 /Ccedilla 8#310 /Egrave 8#311 /Eacute
8#312 /Ecircumflex 8#313 /Edieresis 8#314 /Igrave 8#315 /Iacute
8#316 /Icircumflex 8#317 /Idieresis 8#320 /Eth 8#321 /Ntilde 8#322 /Ograve
8#323 /Oacute 8#324 /Ocircumflex 8#325 /Otilde 8#326 /Odieresis 8#327 /multiply
8#330 /Oslash 8#331 /Ugrave 8#332 /Uacute 8#333 /Ucircumflex
8#334 /Udieresis 8#335 /Yacute 8#336 /Thorn 8#337 /germandbls 8#340 /agrave
8#341 /aacute 8#342 /acircumflex 8#343 /atilde 8#344 /adieresis 8#345 /aring
8#346 /ae 8#347 /ccedilla 8#350 /egrave 8#351 /eacute
8#352 /ecircumflex 8#353 /edieresis 8#354 /igrave 8#355 /iacute
8#356 /icircumflex 8#357 /idieresis 8#360 /eth 8#361 /ntilde 8#362 /ograve
8#363 /oacute 8#364 /ocircumflex 8#365 /otilde 8#366 /odieresis 8#367 /divide
8#370 /oslash 8#371 /ugrave 8#372 /uacute 8#373 /ucircumflex
8#374 /udieresis 8#375 /yacute 8#376 /thorn 8#377 /ydieresis] def
/Helvetica-Bold /Helvetica-Bold-iso isovec ReEncode
/$F2psBegin {$F2psDict begin /$F2psEnteredState save def} def
/$F2psEnd {$F2psEnteredState restore end} def

/pageheader {
save
newpath 0 489 moveto 0 0 lineto 519 0 lineto 519 489 lineto closepath clip newpath
-51.1 497.5 translate
1 -1 scale
$F2psBegin
10 setmiterlimit
0 slj 0 slc
 0.06299 0.06299 sc
} bind def
/pagefooter {
$F2psEnd
restore
} bind def
%%EndProlog
pageheader
%
% Fig objects follow
%
% 
% here starts figure with depth 51
% Polyline
0 slj
0 slc
7.500 slw
n 5697 4365 m 5650 4567 l 5563 4752 l 5444 4923 l 5289 5062 l 5114 5176 l
 4923 5253 l 4716 5289 l 4504 5289 l 4298 5253 l 4102 5181 l
 3916 5073 l 3756 4933 l 3622 4768 l 3518 4582 l 3451 4381 l
 3415 4169 l 3931 4128 l 3973 4314 l 4060 4479 l 4184 4618 l
 4339 4716 l 4520 4768 l 4701 4763 l 4871 4711 l 5015 4613 l
 5124 4474 l 5176 4309 l
 cp gs col7 0.80 shd ef gr gs col0 s gr 
% Polyline
n 5395 5613 m 5490 5558 l 5671 5424 l 5826 5269 l 5965 5093 l 6074 4902 l
 6156 4696 l 6208 4484 l 6229 4262 l 6213 4045 l 6172 3829 l
 6100 3622 l 5996 3426 l 5867 3250 l 5712 3090 l 5639 3031 l
 5339 3455 l 5485 3601 l 5594 3772 l 5671 3958 l 5702 4159 l
 5695 4365 l 5650 4571 l 5556 4770 l 5425 4938 l 5279 5070 l
 5110 5178 l
 cp gs col7 0.80 shd ef gr gs col0 s gr 
% Polyline
n 2040 5074 m 1996 4943 l 1929 4716 l 1887 4484 l 1861 4252 l 1856 4014 l
 1867 3782 l 1903 3545 l 1954 3318 l 2027 3090 l 2114 2874 l
 2223 2662 l 2348 2459 l 2786 2737 l 2682 2905 l 2574 3111 l
 2491 3328 l 2429 3550 l 2388 3777 l 2372 4009 l 2378 4241 l
 2409 4474 l 2460 4696 l 2538 4918 l
 cp gs col7 0.80 shd ef gr gs col0 s gr 
% Polyline
n 5639 3031 m 5537 2961 l 5346 2858 l 5139 2786 l 4928 2745 l 4711 2739 l
 4494 2765 l 4288 2822 l 4086 2915 l 3911 3034 l 3751 3183 l
 3622 3354 l 3518 3545 l 3446 3746 l 3415 3958 l 3411 4170 l
 3933 4125 l 3942 3932 l 3999 3751 l 4097 3581 l 4231 3441 l
 4401 3338 l 4587 3276 l 4783 3256 l 4985 3281 l 5170 3349 l
 5341 3457 l
 cp gs col7 0.80 shd ef gr gs col0 s gr 
% Polyline
n 5378 194 m 5470 210 l 5707 262 l 5940 324 l 6172 401 l 6394 494 l
 6616 597 l 6827 716 l 7029 845 l 7225 990 l 7416 1144 l
 7591 1310 l 7763 1484 l 7383 1829 l 7209 1655 l 7029 1495 l
 6843 1346 l 6642 1212 l 6435 1088 l 6223 984 l 6001 892 l
 5774 814 l 5537 752 l 5305 706 l
 cp gs col7 0.60 shd ef gr gs col0 s gr 
% Polyline
n 7516 3005 m 7452 2848 l 7338 2636 l 7204 2440 l 7060 2254 l 6900 2079 l
 6724 1914 l 6538 1764 l 6342 1635 l 6136 1516 l 5924 1413 l
 5697 1330 l 5470 1268 l 5256 1230 l 5191 1740 l 5496 1810 l
 5712 1888 l 5924 1991 l 6125 2110 l 6316 2244 l 6492 2399 l
 6652 2569 l 6796 2755 l 6920 2951 l 7029 3158 l
 cp gs /PC [[1.00 1.00 1.00] [0.00 0.00 0.00]] def
15.00 15.00 sc P9 [16 0 0 -8 346.07 82.00] PATmp PATsp ef gr PATusp gs col0 s gr 
% Polyline
n 4457 164 m 4465 164 l gs col0 s gr
% Polyline
n 4991 154 m 4747 148 l 4461 169 l 4262 184 l 4024 220 l 3787 272 l
 3555 339 l 3327 422 l 3105 515 l 2889 623 l 2677 742 l
 2476 876 l 2791 1289 l 2992 1155 l 3204 1041 l 3420 938 l
 3648 855 l 3875 783 l 4107 732 l 4344 690 l 4712 655 l
 4951 669 l 5067 680 l 5301 699 l 5381 194 l 5232 174 l

 4990 153 l gs col7 0.60 shd ef gr gs col0 s gr 
% Polyline
n 8269 2194 m 8277 2194 l gs col0 s gr
% Polyline
n 7803 2409 m 7674 2208 l 7529 2012 l 7375 1831 l 7762 1485 l 7917 1666 l
 8061 1862 l 8195 2063 l 8268 2184 l 8404 2420 l 8493 2639 l
 8526 2714 l 8608 2941 l 8675 3173 l 8732 3410 l 8774 3648 l
 8799 3890 l 8815 4133 l 8810 4376 l 8293 4359 l 8299 4247 l
 8288 4004 l 8268 3767 l 8226 3529 l 8175 3297 l 8102 3065 l
 8020 2837 l 7924 2620 l
 cp gs col7 0.60 shd ef gr gs col0 s gr 
% Polyline
n 7256 4061 m 7230 3829 l 7184 3601 l 7116 3374 l 7031 3160 l 7511 3000 l
 7633 3287 l 7695 3514 l 7741 3746 l 7771 4050 l 7779 4313 l
 7764 4533 l 7746 4696 l 7700 4928 l 7638 5160 l 7555 5382 l
 7457 5599 l 7349 5811 l 7141 6133 l 6719 5816 l 6853 5625 l
 6972 5424 l 7070 5207 l 7147 4990 l 7209 4763 l 7256 4505 l
 7259 4283 l
 cp gs col7 0.60 shd ef gr gs col0 s gr 
% Polyline
n 3678 1960 m 3477 2074 l 3286 2208 l 3111 2357 l 2951 2528 l 2793 2734 l
 2347 2461 l 2491 2270 l 2646 2089 l 2816 1924 l 2997 1774 l
 3193 1640 l 3400 1521 l
 cp gs col7 0.80 shd ef gr gs col0 s gr 
% Polyline
n 5248 1223 m 4988 1193 l 4768 1186 l 4530 1191 l 4293 1222 l 4060 1268 l
 3938 1298 l 4112 1790 l 4339 1738 l 4572 1707 l 4764 1699 l
 4953 1708 l
 5183 1733 l gs /PC [[1.00 1.00 1.00] [0.00 0.00 0.00]] def
15.00 15.00 sc P6 [16 0 0 -16 262.53 79.07] PATmp PATsp ef gr PATusp gs col0 s gr 
% Polyline
n 4446 7361 m 4324 7354 l 4086 7323 l 4221 6822 l 4476 6851 l 4687 6862 l
 4936 6836 l 5155 6791 l 5387 6735 l 5609 6657 l 5821 6559 l
 6027 6446 l 6218 6311 l 6399 6162 l 6569 5996 l 6716 5828 l
 7136 6133 l 7075 6203 l 6915 6378 l 6745 6549 l 6564 6698 l
 6368 6838 l 6167 6962 l 5950 7070 l 5733 7163 l 5506 7240 l
 5274 7297 l 5041 7339 l 5006 7341 l 4710 7372 l
 cp gs col7 0.60 shd ef gr gs col0 s gr 
% Polyline
n 8293 4369 m 8288 4489 l 8262 4727 l 8221 4964 l 8164 5196 l 8092 5429 l
 8004 5651 l 7901 5873 l 7788 6079 l 7659 6286 l 7514 6477 l
 7359 6662 l 7194 6838 l 7013 6998 l 6827 7148 l 6626 7287 l
 6420 7411 l 6208 7524 l 5986 7617 l 5759 7700 l 5527 7767 l
 5294 7819 l 5052 7855 l 4814 7881 l 4572 7886 l 4329 7875 l
 4091 7850 l 3854 7808 l 3617 7751 l 3389 7679 l 3162 7597 l
 2940 7493 l 2729 7380 l 2522 7256 l 2326 7117 l 2140 6962 l
 1965 6797 l 1794 6621 l 1639 6440 l 1495 6244 l 1366 6043 l
 1247 5831 l 1144 5609 l 1056 5387 l 979 5155 l 917 4923 l
 870 4685 l 839 4448 l 824 4205 l 824 3963 l 834 3720 l
 865 3483 l 906 3245 l 968 3008 l 1041 2781 l 1128 2554 l
 1226 2332 l 1340 2120 l 1469 1914 l 1608 1717 l 1763 1526 l
 1923 1351 l 2099 1181 l 2280 1026 l 2471 879 l 2781 1289 l
 2600 1428 l 2419 1588 l 2249 1759 l 2094 1939 l 1949 2130 l
 1820 2332 l 1701 2538 l 1603 2760 l 1516 2982 l 1448 3209 l
 1397 3447 l 1361 3684 l 1340 3921 l 1340 4159 l 1356 4401 l
 1386 4634 l 1438 4871 l 1500 5098 l 1583 5325 l 1681 5542 l
 1799 5754 l 1923 5955 l 2068 6146 l 2228 6327 l 2393 6497 l
 2574 6652 l 2770 6797 l 2971 6926 l 3178 7034 l 3400 7132 l
 3622 7215 l 3854 7277 l 4091 7316 l 4226 6826 l 3988 6781 l
 3761 6714 l 3544 6631 l 3327 6533 l 3126 6415 l 2935 6275 l
 2754 6126 l 2589 5955 l 2434 5775 l 2300 5584 l 2181 5382 l
 2078 5165 l 2040 5077 l 2539 4927 l 2631 5129 l 2749 5325 l
 2889 5511 l 3044 5687 l 3214 5836 l 3400 5976 l 3601 6089 l
 3813 6182 l 4030 6255 l 4257 6306 l 4484 6327 l 4716 6332 l
 4943 6306 l 5170 6260 l 5387 6187 l 5599 6095 l 5800 5976 l
 5981 5836 l 6151 5682 l 6301 5511 l 6435 5320 l 6543 5119 l
 6631 4907 l 6693 4685 l 6729 4463 l 6745 4231 l 6734 4004 l
 6693 3777 l 6631 3560 l 6543 3349 l 6435 3147 l 6306 2961 l
 6151 2791 l 5981 2641 l 5795 2512 l 5594 2404 l 5382 2316 l
 5160 2259 l 4938 2223 l 4711 2218 l 4484 2239 l 4262 2285 l
 4045 2357 l 3844 2456 l 3653 2579 l 3477 2724 l 3322 2889 l
 3188 3070 l 3075 3266 l 2987 3472 l 2930 3689 l 2894 3916 l
 2889 4138 l 2914 4365 l 2966 4582 l 3044 4794 l 3152 4990 l
 3281 5176 l 3431 5341 l 3601 5485 l 3792 5604 l 3993 5697 l
 4205 5764 l 4427 5805 l 4649 5816 l 4871 5795 l 5088 5744 l
 5294 5666 l
 5391 5617 l gs col0 s gr 
% Polyline
n 3398 1518 m 3618 1408 l 3933 1298 l 4103 1783 l 3913 1843 l 3673 1953 l

 3403 1523 l gs /PC [[1.00 1.00 1.00] [0.00 0.00 0.00]] def
15.00 15.00 sc P4 [16 0 0 -16 226.53 86.53] PATmp PATsp ef gr PATusp gs col0 s gr 
% Polyline
n 8805 4372 m 8797 4575 l 8771 4792 l 8741 4952 l 8701 5142 l 8212 5047 l
 8257 4800 l 8280 4605 l
 8295 4365 l gs /PC [[1.00 1.00 1.00] [0.00 0.00 0.00]] def
15.00 15.00 sc P11 [16 0 0 -16 547.47 291.00] PATmp PATsp ef gr PATusp gs col0 s gr 
/Helvetica-Bold-iso ff 317.50 scf sf
3879 3551 m
gs 1 -1 sc  30.0 rot (Data 2) col0 sh gr
/Helvetica-Bold-iso ff 317.50 scf sf
4195 5076 m
gs 1 -1 sc (Data 1) col0 sh gr
/Helvetica-Bold-iso ff 317.50 scf sf
5809 3837 m
gs 1 -1 sc  270.0 rot (Data 3) col0 sh gr
/Helvetica-Bold-iso ff 317.50 scf sf
2329 4449 m
gs 1 -1 sc  90.0 rot (Data n-1) col0 sh gr
/Helvetica-Bold-iso ff 317.50 scf sf
6121 1907 m
gs 1 -1 sc  320.0 rot (CRC) col0 sh gr
/Helvetica-Bold-iso ff 317.50 scf sf
6061 779 m
gs 1 -1 sc  332.0 rot (ECC m-1) col0 sh gr
/Helvetica-Bold-iso ff 317.50 scf sf
2357 1309 m
gs 1 -1 sc  38.0 rot (...) col0 sh gr
/Helvetica-Bold-iso ff 317.50 scf sf
3841 7062 m
gs 1 -1 sc  345.0 rot (...) col0 sh gr
/Helvetica-Bold-iso ff 317.50 scf sf
4974 5562 m
gs 1 -1 sc  20.0 rot (...) col0 sh gr
/Helvetica-Bold-iso ff 317.50 scf sf
2311 5075 m
gs 1 -1 sc  295.0 rot (...) col0 sh gr
/Helvetica-Bold-iso ff 317.50 scf sf
3406 839 m
gs 1 -1 sc  15.0 rot (ECC m-2) col0 sh gr
/Helvetica-Bold-iso ff 317.50 scf sf
2712 2589 m
gs 1 -1 sc  42.0 rot (Data n) col0 sh gr
/Helvetica-Bold-iso ff 254.00 scf sf
3631 1786 m
gs 1 -1 sc  20.0 rot (EH) col0 sh gr
/Helvetica-Bold-iso ff 254.00 scf sf
4106 1596 m
gs 1 -1 sc  4.0 rot (padding) col0 sh gr
/Helvetica-Bold-iso ff 317.50 scf sf
8010 2385 m
gs 1 -1 sc  290.0 rot (ECC m) col0 sh gr
/Helvetica-Bold-iso ff 317.50 scf sf
7515 5130 m
gs 1 -1 sc  80.0 rot (ECC 1) col0 sh gr
/Helvetica-Bold-iso ff 317.50 scf sf
5201 7212 m
gs 1 -1 sc  20.0 rot (ECC 2) col0 sh gr
/Helvetica-Bold-iso ff 206.38 scf sf
8885 5175 m
gs 1 -1 sc  80.0 rot (unused) col0 sh gr
% here ends figure;
pagefooter
showpage
%%Trailer
end
%EOF
